// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String
  lastName  String
  imgUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams           TeamMember[]
  taskAssignments Assignee[]
}

model Project {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  columns      Column[]
  tasks        Task[]
  teamProjects TeamProject[]
}

model Team {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  TeamMember[]
  projects TeamProject[]
}

model TeamMember {
  id      String  @id @default(uuid())
  teamId  String
  userId  String
  isOwner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId]) 
}

model TeamProject {
  id        String @id @default(uuid())
  teamId    String
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team    Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Column {
  id          String  @id @default(uuid())
  projectId   String
  name        String
  description String?
  color       String?
  position    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]
}

model Task {
  id          String    @id @default(uuid())
  projectId   String
  columnId    String
  title       String
  description String?
  position    Float
  imgUrl      String?
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  column    Column     @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignees Assignee[]
}

model Assignee {
  id        String   @id @default(uuid())
  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}